// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/kazuzaku-dev/todo-grpc-go/internal/generated/gorm/model"
)

func newGTodo(db *gorm.DB, opts ...gen.DOOption) gTodo {
	_gTodo := gTodo{}

	_gTodo.gTodoDo.UseDB(db, opts...)
	_gTodo.gTodoDo.UseModel(&model.GTodo{})

	tableName := _gTodo.gTodoDo.TableName()
	_gTodo.ALL = field.NewAsterisk(tableName)
	_gTodo.TodoID = field.NewString(tableName, "todo_id")
	_gTodo.Title = field.NewString(tableName, "title")
	_gTodo.Description = field.NewString(tableName, "description")
	_gTodo.Status = field.NewString(tableName, "status")
	_gTodo.AssignUserID = field.NewString(tableName, "assign_user_id")
	_gTodo.CreatedAt = field.NewTime(tableName, "created_at")
	_gTodo.UpdatedAt = field.NewTime(tableName, "updated_at")

	_gTodo.fillFieldMap()

	return _gTodo
}

// gTodo ToDoæƒ…å ±
type gTodo struct {
	gTodoDo

	ALL          field.Asterisk
	TodoID       field.String // ToDo ID
	Title        field.String // ã‚¿ã‚¤ãƒˆãƒ«
	Description  field.String // èª¬æ˜Ž
	Status       field.String // ã‚¹ãƒ†ãƒ¼ã‚¿ã‚¹
	AssignUserID field.String // ã‚¢ã‚µã‚¤ãƒ³ãƒ¦ãƒ¼ã‚¶ãƒ¼ID
	CreatedAt    field.Time   // ä½œæˆæ—¥æ™‚
	UpdatedAt    field.Time   // æ›´æ–°æ—¥æ™‚

	fieldMap map[string]field.Expr
}

func (g gTodo) Table(newTableName string) *gTodo {
	g.gTodoDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gTodo) As(alias string) *gTodo {
	g.gTodoDo.DO = *(g.gTodoDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gTodo) updateTableName(table string) *gTodo {
	g.ALL = field.NewAsterisk(table)
	g.TodoID = field.NewString(table, "todo_id")
	g.Title = field.NewString(table, "title")
	g.Description = field.NewString(table, "description")
	g.Status = field.NewString(table, "status")
	g.AssignUserID = field.NewString(table, "assign_user_id")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")

	g.fillFieldMap()

	return g
}

func (g *gTodo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gTodo) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 7)
	g.fieldMap["todo_id"] = g.TodoID
	g.fieldMap["title"] = g.Title
	g.fieldMap["description"] = g.Description
	g.fieldMap["status"] = g.Status
	g.fieldMap["assign_user_id"] = g.AssignUserID
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
}

func (g gTodo) clone(db *gorm.DB) gTodo {
	g.gTodoDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gTodo) replaceDB(db *gorm.DB) gTodo {
	g.gTodoDo.ReplaceDB(db)
	return g
}

type gTodoDo struct{ gen.DO }

type IGTodoDo interface {
	gen.SubQuery
	Debug() IGTodoDo
	WithContext(ctx context.Context) IGTodoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGTodoDo
	WriteDB() IGTodoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGTodoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGTodoDo
	Not(conds ...gen.Condition) IGTodoDo
	Or(conds ...gen.Condition) IGTodoDo
	Select(conds ...field.Expr) IGTodoDo
	Where(conds ...gen.Condition) IGTodoDo
	Order(conds ...field.Expr) IGTodoDo
	Distinct(cols ...field.Expr) IGTodoDo
	Omit(cols ...field.Expr) IGTodoDo
	Join(table schema.Tabler, on ...field.Expr) IGTodoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGTodoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGTodoDo
	Group(cols ...field.Expr) IGTodoDo
	Having(conds ...gen.Condition) IGTodoDo
	Limit(limit int) IGTodoDo
	Offset(offset int) IGTodoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGTodoDo
	Unscoped() IGTodoDo
	Create(values ...*model.GTodo) error
	CreateInBatches(values []*model.GTodo, batchSize int) error
	Save(values ...*model.GTodo) error
	First() (*model.GTodo, error)
	Take() (*model.GTodo, error)
	Last() (*model.GTodo, error)
	Find() ([]*model.GTodo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GTodo, err error)
	FindInBatches(result *[]*model.GTodo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GTodo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGTodoDo
	Assign(attrs ...field.AssignExpr) IGTodoDo
	Joins(fields ...field.RelationField) IGTodoDo
	Preload(fields ...field.RelationField) IGTodoDo
	FirstOrInit() (*model.GTodo, error)
	FirstOrCreate() (*model.GTodo, error)
	FindByPage(offset int, limit int) (result []*model.GTodo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGTodoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gTodoDo) Debug() IGTodoDo {
	return g.withDO(g.DO.Debug())
}

func (g gTodoDo) WithContext(ctx context.Context) IGTodoDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gTodoDo) ReadDB() IGTodoDo {
	return g.Clauses(dbresolver.Read)
}

func (g gTodoDo) WriteDB() IGTodoDo {
	return g.Clauses(dbresolver.Write)
}

func (g gTodoDo) Session(config *gorm.Session) IGTodoDo {
	return g.withDO(g.DO.Session(config))
}

func (g gTodoDo) Clauses(conds ...clause.Expression) IGTodoDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gTodoDo) Returning(value interface{}, columns ...string) IGTodoDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gTodoDo) Not(conds ...gen.Condition) IGTodoDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gTodoDo) Or(conds ...gen.Condition) IGTodoDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gTodoDo) Select(conds ...field.Expr) IGTodoDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gTodoDo) Where(conds ...gen.Condition) IGTodoDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gTodoDo) Order(conds ...field.Expr) IGTodoDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gTodoDo) Distinct(cols ...field.Expr) IGTodoDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gTodoDo) Omit(cols ...field.Expr) IGTodoDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gTodoDo) Join(table schema.Tabler, on ...field.Expr) IGTodoDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gTodoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGTodoDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gTodoDo) RightJoin(table schema.Tabler, on ...field.Expr) IGTodoDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gTodoDo) Group(cols ...field.Expr) IGTodoDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gTodoDo) Having(conds ...gen.Condition) IGTodoDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gTodoDo) Limit(limit int) IGTodoDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gTodoDo) Offset(offset int) IGTodoDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gTodoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGTodoDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gTodoDo) Unscoped() IGTodoDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gTodoDo) Create(values ...*model.GTodo) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gTodoDo) CreateInBatches(values []*model.GTodo, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gTodoDo) Save(values ...*model.GTodo) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gTodoDo) First() (*model.GTodo, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GTodo), nil
	}
}

func (g gTodoDo) Take() (*model.GTodo, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GTodo), nil
	}
}

func (g gTodoDo) Last() (*model.GTodo, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GTodo), nil
	}
}

func (g gTodoDo) Find() ([]*model.GTodo, error) {
	result, err := g.DO.Find()
	return result.([]*model.GTodo), err
}

func (g gTodoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GTodo, err error) {
	buf := make([]*model.GTodo, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gTodoDo) FindInBatches(result *[]*model.GTodo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gTodoDo) Attrs(attrs ...field.AssignExpr) IGTodoDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gTodoDo) Assign(attrs ...field.AssignExpr) IGTodoDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gTodoDo) Joins(fields ...field.RelationField) IGTodoDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gTodoDo) Preload(fields ...field.RelationField) IGTodoDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gTodoDo) FirstOrInit() (*model.GTodo, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GTodo), nil
	}
}

func (g gTodoDo) FirstOrCreate() (*model.GTodo, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GTodo), nil
	}
}

func (g gTodoDo) FindByPage(offset int, limit int) (result []*model.GTodo, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gTodoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gTodoDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gTodoDo) Delete(models ...*model.GTodo) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gTodoDo) withDO(do gen.Dao) *gTodoDo {
	g.DO = *do.(*gen.DO)
	return g
}
