// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/kazuzaku-dev/todo-grpc-go/internal/generated/gorm/model"
)

func newGUser(db *gorm.DB, opts ...gen.DOOption) gUser {
	_gUser := gUser{}

	_gUser.gUserDo.UseDB(db, opts...)
	_gUser.gUserDo.UseModel(&model.GUser{})

	tableName := _gUser.gUserDo.TableName()
	_gUser.ALL = field.NewAsterisk(tableName)
	_gUser.UserID = field.NewString(tableName, "user_id")
	_gUser.Name = field.NewString(tableName, "name")
	_gUser.Email = field.NewString(tableName, "email")
	_gUser.CreatedAt = field.NewTime(tableName, "created_at")
	_gUser.UpdatedAt = field.NewTime(tableName, "updated_at")

	_gUser.fillFieldMap()

	return _gUser
}

// gUser ãƒ¦ãƒ¼ã‚¶ãƒ¼æƒ…å ±
type gUser struct {
	gUserDo

	ALL       field.Asterisk
	UserID    field.String // ãƒ¦ãƒ¼ã‚¶ãƒ¼ID
	Name      field.String // åå‰
	Email     field.String // ãƒ¡ãƒ¼ãƒ«ã‚¢ãƒ‰ãƒ¬ã‚¹
	CreatedAt field.Time   // ä½œæˆæ—¥æ™‚
	UpdatedAt field.Time   // æ›´æ–°æ—¥æ™‚

	fieldMap map[string]field.Expr
}

func (g gUser) Table(newTableName string) *gUser {
	g.gUserDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gUser) As(alias string) *gUser {
	g.gUserDo.DO = *(g.gUserDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gUser) updateTableName(table string) *gUser {
	g.ALL = field.NewAsterisk(table)
	g.UserID = field.NewString(table, "user_id")
	g.Name = field.NewString(table, "name")
	g.Email = field.NewString(table, "email")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")

	g.fillFieldMap()

	return g
}

func (g *gUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gUser) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 5)
	g.fieldMap["user_id"] = g.UserID
	g.fieldMap["name"] = g.Name
	g.fieldMap["email"] = g.Email
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
}

func (g gUser) clone(db *gorm.DB) gUser {
	g.gUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gUser) replaceDB(db *gorm.DB) gUser {
	g.gUserDo.ReplaceDB(db)
	return g
}

type gUserDo struct{ gen.DO }

type IGUserDo interface {
	gen.SubQuery
	Debug() IGUserDo
	WithContext(ctx context.Context) IGUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGUserDo
	WriteDB() IGUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGUserDo
	Not(conds ...gen.Condition) IGUserDo
	Or(conds ...gen.Condition) IGUserDo
	Select(conds ...field.Expr) IGUserDo
	Where(conds ...gen.Condition) IGUserDo
	Order(conds ...field.Expr) IGUserDo
	Distinct(cols ...field.Expr) IGUserDo
	Omit(cols ...field.Expr) IGUserDo
	Join(table schema.Tabler, on ...field.Expr) IGUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGUserDo
	Group(cols ...field.Expr) IGUserDo
	Having(conds ...gen.Condition) IGUserDo
	Limit(limit int) IGUserDo
	Offset(offset int) IGUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGUserDo
	Unscoped() IGUserDo
	Create(values ...*model.GUser) error
	CreateInBatches(values []*model.GUser, batchSize int) error
	Save(values ...*model.GUser) error
	First() (*model.GUser, error)
	Take() (*model.GUser, error)
	Last() (*model.GUser, error)
	Find() ([]*model.GUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GUser, err error)
	FindInBatches(result *[]*model.GUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGUserDo
	Assign(attrs ...field.AssignExpr) IGUserDo
	Joins(fields ...field.RelationField) IGUserDo
	Preload(fields ...field.RelationField) IGUserDo
	FirstOrInit() (*model.GUser, error)
	FirstOrCreate() (*model.GUser, error)
	FindByPage(offset int, limit int) (result []*model.GUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gUserDo) Debug() IGUserDo {
	return g.withDO(g.DO.Debug())
}

func (g gUserDo) WithContext(ctx context.Context) IGUserDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gUserDo) ReadDB() IGUserDo {
	return g.Clauses(dbresolver.Read)
}

func (g gUserDo) WriteDB() IGUserDo {
	return g.Clauses(dbresolver.Write)
}

func (g gUserDo) Session(config *gorm.Session) IGUserDo {
	return g.withDO(g.DO.Session(config))
}

func (g gUserDo) Clauses(conds ...clause.Expression) IGUserDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gUserDo) Returning(value interface{}, columns ...string) IGUserDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gUserDo) Not(conds ...gen.Condition) IGUserDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gUserDo) Or(conds ...gen.Condition) IGUserDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gUserDo) Select(conds ...field.Expr) IGUserDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gUserDo) Where(conds ...gen.Condition) IGUserDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gUserDo) Order(conds ...field.Expr) IGUserDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gUserDo) Distinct(cols ...field.Expr) IGUserDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gUserDo) Omit(cols ...field.Expr) IGUserDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gUserDo) Join(table schema.Tabler, on ...field.Expr) IGUserDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGUserDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IGUserDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gUserDo) Group(cols ...field.Expr) IGUserDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gUserDo) Having(conds ...gen.Condition) IGUserDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gUserDo) Limit(limit int) IGUserDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gUserDo) Offset(offset int) IGUserDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGUserDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gUserDo) Unscoped() IGUserDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gUserDo) Create(values ...*model.GUser) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gUserDo) CreateInBatches(values []*model.GUser, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gUserDo) Save(values ...*model.GUser) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gUserDo) First() (*model.GUser, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GUser), nil
	}
}

func (g gUserDo) Take() (*model.GUser, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GUser), nil
	}
}

func (g gUserDo) Last() (*model.GUser, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GUser), nil
	}
}

func (g gUserDo) Find() ([]*model.GUser, error) {
	result, err := g.DO.Find()
	return result.([]*model.GUser), err
}

func (g gUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GUser, err error) {
	buf := make([]*model.GUser, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gUserDo) FindInBatches(result *[]*model.GUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gUserDo) Attrs(attrs ...field.AssignExpr) IGUserDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gUserDo) Assign(attrs ...field.AssignExpr) IGUserDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gUserDo) Joins(fields ...field.RelationField) IGUserDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gUserDo) Preload(fields ...field.RelationField) IGUserDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gUserDo) FirstOrInit() (*model.GUser, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GUser), nil
	}
}

func (g gUserDo) FirstOrCreate() (*model.GUser, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GUser), nil
	}
}

func (g gUserDo) FindByPage(offset int, limit int) (result []*model.GUser, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gUserDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gUserDo) Delete(models ...*model.GUser) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gUserDo) withDO(do gen.Dao) *gUserDo {
	g.DO = *do.(*gen.DO)
	return g
}
