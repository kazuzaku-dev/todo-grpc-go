// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: todo.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ToDoServie_Create_FullMethodName = "/kazuzaku.dev.todo.ToDoServie/Create"
	ToDoServie_Update_FullMethodName = "/kazuzaku.dev.todo.ToDoServie/Update"
	ToDoServie_Delete_FullMethodName = "/kazuzaku.dev.todo.ToDoServie/Delete"
	ToDoServie_Get_FullMethodName    = "/kazuzaku.dev.todo.ToDoServie/Get"
	ToDoServie_List_FullMethodName   = "/kazuzaku.dev.todo.ToDoServie/List"
)

// ToDoServieClient is the client API for ToDoServie service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ToDoのサービス
type ToDoServieClient interface {
	// ToDoを作成する
	Create(ctx context.Context, in *ToDo, opts ...grpc.CallOption) (*CreateToDoResponse, error)
	// ToDoを更新する
	Update(ctx context.Context, in *ToDo, opts ...grpc.CallOption) (*UpdateToDoResponse, error)
	// ToDoを削除する
	Delete(ctx context.Context, in *ToDo, opts ...grpc.CallOption) (*DeleteToDoResponse, error)
	// ToDoを取得する
	Get(ctx context.Context, in *GetToDoRequest, opts ...grpc.CallOption) (*ToDo, error)
	// ToDoを一覧取得する
	List(ctx context.Context, in *GetToDoListRequest, opts ...grpc.CallOption) (*GetToDoListResponse, error)
}

type toDoServieClient struct {
	cc grpc.ClientConnInterface
}

func NewToDoServieClient(cc grpc.ClientConnInterface) ToDoServieClient {
	return &toDoServieClient{cc}
}

func (c *toDoServieClient) Create(ctx context.Context, in *ToDo, opts ...grpc.CallOption) (*CreateToDoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateToDoResponse)
	err := c.cc.Invoke(ctx, ToDoServie_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoServieClient) Update(ctx context.Context, in *ToDo, opts ...grpc.CallOption) (*UpdateToDoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateToDoResponse)
	err := c.cc.Invoke(ctx, ToDoServie_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoServieClient) Delete(ctx context.Context, in *ToDo, opts ...grpc.CallOption) (*DeleteToDoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteToDoResponse)
	err := c.cc.Invoke(ctx, ToDoServie_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoServieClient) Get(ctx context.Context, in *GetToDoRequest, opts ...grpc.CallOption) (*ToDo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToDo)
	err := c.cc.Invoke(ctx, ToDoServie_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toDoServieClient) List(ctx context.Context, in *GetToDoListRequest, opts ...grpc.CallOption) (*GetToDoListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetToDoListResponse)
	err := c.cc.Invoke(ctx, ToDoServie_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToDoServieServer is the server API for ToDoServie service.
// All implementations must embed UnimplementedToDoServieServer
// for forward compatibility
//
// ToDoのサービス
type ToDoServieServer interface {
	// ToDoを作成する
	Create(context.Context, *ToDo) (*CreateToDoResponse, error)
	// ToDoを更新する
	Update(context.Context, *ToDo) (*UpdateToDoResponse, error)
	// ToDoを削除する
	Delete(context.Context, *ToDo) (*DeleteToDoResponse, error)
	// ToDoを取得する
	Get(context.Context, *GetToDoRequest) (*ToDo, error)
	// ToDoを一覧取得する
	List(context.Context, *GetToDoListRequest) (*GetToDoListResponse, error)
	mustEmbedUnimplementedToDoServieServer()
}

// UnimplementedToDoServieServer must be embedded to have forward compatible implementations.
type UnimplementedToDoServieServer struct {
}

func (UnimplementedToDoServieServer) Create(context.Context, *ToDo) (*CreateToDoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedToDoServieServer) Update(context.Context, *ToDo) (*UpdateToDoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedToDoServieServer) Delete(context.Context, *ToDo) (*DeleteToDoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedToDoServieServer) Get(context.Context, *GetToDoRequest) (*ToDo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedToDoServieServer) List(context.Context, *GetToDoListRequest) (*GetToDoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedToDoServieServer) mustEmbedUnimplementedToDoServieServer() {}

// UnsafeToDoServieServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToDoServieServer will
// result in compilation errors.
type UnsafeToDoServieServer interface {
	mustEmbedUnimplementedToDoServieServer()
}

func RegisterToDoServieServer(s grpc.ServiceRegistrar, srv ToDoServieServer) {
	s.RegisterService(&ToDoServie_ServiceDesc, srv)
}

func _ToDoServie_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToDo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServieServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToDoServie_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServieServer).Create(ctx, req.(*ToDo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDoServie_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToDo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServieServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToDoServie_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServieServer).Update(ctx, req.(*ToDo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDoServie_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToDo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServieServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToDoServie_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServieServer).Delete(ctx, req.(*ToDo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDoServie_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetToDoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServieServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToDoServie_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServieServer).Get(ctx, req.(*GetToDoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToDoServie_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetToDoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToDoServieServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToDoServie_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToDoServieServer).List(ctx, req.(*GetToDoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ToDoServie_ServiceDesc is the grpc.ServiceDesc for ToDoServie service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToDoServie_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kazuzaku.dev.todo.ToDoServie",
	HandlerType: (*ToDoServieServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ToDoServie_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ToDoServie_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ToDoServie_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ToDoServie_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ToDoServie_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "todo.proto",
}
